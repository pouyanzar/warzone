* maps:
loadmap ./src/test/resources/maps/canada/canada.map
loadmap ./src/test/resources/maps/usa8/usa8regions.map
editmap ./src/test/resources/maps/canada/canada.map

* players
gameplayer -add John -add Pouyan -add Nazanin
gameplayer -add John -add Pouyan
assigncountries


editcontinent -add 1 North_America
editcountry -add Canada 1 -add USA 1
editneighbor -add Canada USA -add USA Canada


-----------------------------------------------------
* For the sake of simplicity, let us just assume that the country/continent names are unique

* All turns start with reinforcement. Each turn, each player receives a number of armies equal to: 
(max(3, # of countries the player own/3)+(continent value of all continents controlled by the player)).

very turn, the players are given a number of armies that depends on the number of territories they
own (# of territories owned divided by 3, rounded down. If the player owns all the territories of an entire continent,
the player is given a number of armies corresponding to the continent’s control bonus value. In any case, the
minimal number of reinforcement armies for any player is 3.


-----------------------------------------------------
refactoring:

PMD Source Code Analyzer 
An extensible cross-language static code analyzer
https://pmd.github.io/ 

1) all/controller factory references all other factories:

2) all writes to console done via Utl.consoleMessage - adds logging

3) Refactor class names:
MessageType, MsgType
OrderExecutionController, OrderExecController
SoftwareFactoryController, ControllerFactory
UserMessageModel, AppMsg
OrderDeploy, DeployOrder
SoftwareFactoryModel, ModelFactory
SoftwareFactoryView, ViewFactory
IUserMessageModel, IAppMsg
MapEditorConsoleView, MapEditorConsole
GameStartupConsoleView, GameStartupConsole
GamePlayConsoleView, GamePlayConsole
IOrderModel, IOrder

4) moved deploy method from player class to order class

5) State pattern

6) Observer pattern

7) command pattern

8) constructor dependencies to factories

9) Use AssertSame instead OfAssertTrue in unit tests

10) Rename Method: The name of a method does not reveal its purpose. Refactor it by changing the name of the method.

11) remove unused variables:
Avoid unused local variables
UnusedPrivateField

12) Remove unused formal parameter
UnusedFormalParameter

13) Use AssertNull instead of AssertTrue in unit tests
UseAssertNullInsteadOfAssertTrue

14) Use AssertEquals instead of AssertTrue in unit tests
UseAssertEqualsInsteadOfAssertTrue

15) Use collection IsEmpty instead of size() == 0 (or size() != 0, size() > 0, size() < 1)
UseCollectionIsEmpty


rename methods:
setPlayer to cloneToPlayer



-------------
Unit Tests - Build 2

(1) map validation – including map and continents being connected graphs; 
test_validatemap_false -> MapTest
test_validatemap_false2 -> MapTest
test_validatemap_false3 -> MapTest
test_processMapEditorCommand_loadmap_invalid -> MapEditorControllerTest

(2) reading an invalid map file;
test_processMapEditorCommand_loadmap_invalid -> MapEditorControllerTest 

3) validation of a correct startup phase
test_processGameStartupCommand_assigncountries_valid -> GameStartupControllerTest
test_processMapEditorCommand_loadmap_valid -> MapEditorControllerTest

4) calculation of number of reinforcement armies;
test_assignReinforcements_1 -> GamePlayTest
test_assignReinforcements_2 -> GamePlayTest

5) various test for the order validation upon execution
 + deploy: 
   test_deploy_1 -> OrderDeployTest
   test_processGamePlayCommand_deploy_invalid -> IssueOrderControllerTest 

 + advance:
   all tests -> OrderAdvanceTest
   test_processGamePlayCommand_advance_valid -> IssueOrderControllerTest
   test_processGamePlayCommand_advance_invalid -> IssueOrderControllerTest

 + bomb...
   all tests -> OrderBombTest
   test_processGamePlayCommand_bomb_valid -> test_processGamePlayCommand_advance_invalid 
   test_processGamePlayCommand_bomb_invalid -> test_processGamePlayCommand_advance_invalid 
 




-------------
refactoring for build 3:

1) move all comand parsing into respective Order class (MAYBE - THINK ABOUT IT)
2) d_reinforcements + Utl.plural(d_reinforcements, " army", " armies")
