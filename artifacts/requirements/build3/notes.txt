* maps:
loadmap ./src/test/resources/maps/world_small/world_small.map
tournament -M ./src/test/resources/maps/world_small/world_small.map -P benevolent -G 1 -D 10
loadmap ./src/test/resources/maps/canada/canada.map
loadmap ./src/test/resources/maps/usa8/usa8regions.map



* players
gameplayer -add John -add Pouyan -add Nazanin
gameplayer -add John -add Pouyan
gameplayer -add H1 -add B1 bene
assigncountries


editcontinent -add 1 North_America
editcountry -add Canada 1 -add USA 1
editneighbor -add Canada USA -add USA Canada
editmap ./src/test/resources/maps/canada/canada.map

loadmap ./src/test/resources/maps/world_small/world_small.map
gameplayer -add H1 -add B1 bene
assigncountries

tournament -M ./src/test/resources/maps/world_small/world_small.map -P benevolent, benevolent -G 1 -D 10

-----------------------------------------------------
SOEN 6441: Joey Paquet 

From Discord:

Q: "Random player deploys armies on a random country"
Here, is the country selected randomly from the countries owned by that player or randomly selected from any country in the map?
A: Owned by the player



-----------------------------------------------------
Q: loadmap/savemap should we choose the format based on the filename extension?
A: loadmap -> autodetect from the map file
A: savemap -> add parameter to command

Q: for player behaviour can we add a param to the gameplayer command? e.g. gameplayer -add player1 human -add player2 random
A: yes

Q: in single player mode: can we add a command in startup to limit the number of turns (like in tournament mode), especially when all players are non-human? e.g. maxturns 100
Q: should the single mode game limit the number of turns if all players are non-human?
A: yes. the game should be able to show a winner during a presentation.

S: tournament -> no human

Q: cheater mode, works directly on the map during issue_order?




-----------------------------------------------------
refactoring:

PMD Source Code Analyzer 
An extensible cross-language static code analyzer
https://pmd.github.io/ 

1) all/controller factory references all other factories:

2) all writes to console done via Utl.consoleMessage - adds logging

3) Refactor class names:
MessageType, MsgType
OrderExecutionController, OrderExecController
SoftwareFactoryController, ControllerFactory
UserMessageModel, AppMsg
OrderDeploy, DeployOrder
SoftwareFactoryModel, ModelFactory
SoftwareFactoryView, ViewFactory
IUserMessageModel, IAppMsg
MapEditorConsoleView, MapEditorConsole
GameStartupConsoleView, GameStartupConsole
GamePlayConsoleView, GamePlayConsole
IOrderModel, IOrder

4) moved deploy method from player class to order class

5) State pattern

6) Observer pattern

7) command pattern

8) constructor dependencies to factories

9) Use AssertSame instead OfAssertTrue in unit tests

10) Rename Method: The name of a method does not reveal its purpose. Refactor it by changing the name of the method.

11) remove unused variables:
Avoid unused local variables
UnusedPrivateField

12) Remove unused formal parameter
UnusedFormalParameter

13) Use AssertNull instead of AssertTrue in unit tests
UseAssertNullInsteadOfAssertTrue

14) Use AssertEquals instead of AssertTrue in unit tests
UseAssertEqualsInsteadOfAssertTrue

15) Use collection IsEmpty instead of size() == 0 (or size() != 0, size() > 0, size() < 1)
UseCollectionIsEmpty


rename methods:
setPlayer to cloneToPlayer



-------------
Unit Tests - Build 2

(1) map validation – including map and continents being connected graphs; 
test_validatemap_false -> MapTest
test_validatemap_false2 -> MapTest
test_validatemap_false3 -> MapTest
test_processMapEditorCommand_loadmap_invalid -> MapEditorControllerTest

(2) reading an invalid map file;
test_processMapEditorCommand_loadmap_invalid -> MapEditorControllerTest 

3) validation of a correct startup phase
test_processGameStartupCommand_assigncountries_valid -> GameStartupControllerTest
test_processMapEditorCommand_loadmap_valid -> MapEditorControllerTest

4) calculation of number of reinforcement armies;
test_assignReinforcements_1 -> GamePlayTest
test_assignReinforcements_2 -> GamePlayTest

5) various test for the order validation upon execution
 + deploy: 
   test_deploy_1 -> OrderDeployTest
   test_processGamePlayCommand_deploy_invalid -> IssueOrderControllerTest 

 + advance:
   all tests -> OrderAdvanceTest
   test_processGamePlayCommand_advance_valid -> IssueOrderControllerTest
   test_processGamePlayCommand_advance_invalid -> IssueOrderControllerTest

 + bomb...
   all tests -> OrderBombTest
   test_processGamePlayCommand_bomb_valid -> test_processGamePlayCommand_advance_invalid 
   test_processGamePlayCommand_bomb_invalid -> test_processGamePlayCommand_advance_invalid 
 




-------------
refactoring for build 3:

1) move all comand parsing into respective Order class (MAYBE - THINK ABOUT IT)
2) d_reinforcements + Utl.plural(d_reinforcements, " army", " armies")



